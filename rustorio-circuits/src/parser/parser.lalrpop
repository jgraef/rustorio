use std::str::FromStr;
use crate::{
    parser::ast::{
        ModDecl, ModBody, GenericDecl, GenericArg, PortDecl, WireDecl, Statement, Ident, Input, Output,
        DeciderMode, Wires, PortArg, Unit, ImportPath, SignalConst, Signal, Expr, ConstCond,
    },
    ir::{ArithmeticOp, DeciderOp, WireColor},
};


grammar;


pub Unit: Unit = {
    <imports:Import*> <modules:ModDecl*> => Unit::new(<>),
}


pub ModDecl: ModDecl = {
    "mod" <ident:Ident> <generics:("<" <CommaSeperated<GenericDecl>> ">")?> "{" <body:ModBody> "}" => ModDecl { <> },
}

pub ModBody: ModBody = {
    // TODO: Put PortDecl, WireDecl and Statement into one rule, so that we can just parse a ;-seperated list of that
    <ports:(<PortDecl> ";")*> <wires:(<WireDecl> ";")*> <statements:(<Statement>)*> => ModBody { <> },
}

pub GenericDecl: GenericDecl = {
    <NumVar> => GenericDecl::Number(<>),
    <SignalVar> => GenericDecl::Signal(<>),
}

pub PortDecl: PortDecl = {
    "port" <ident:Ident> "(" "red"? <red:Ident> "," "green"? <green:Ident> ")" => PortDecl::Both { <> },
    "port" <color:WireColor> <ident:Ident> => PortDecl::ShortHand { <> },
}

pub WireDecl: WireDecl = {
    "wire" <color:WireColor> <ident:Ident> => WireDecl { <> },
}

pub Statement: Statement = {
    //<output:Output> "<-" "{" <constants:(<SignalConst> ";")*> "}" ";" => Statement::Constant { <> },
    <output:Output> "<-" "{" <constants:CommaSeperated<SignalConst>> "}" ";" => Statement::Constant { <> },

    <output:Output> "<-" "if" <left:Input> <op:DeciderOp> <right:Input> "then" <mode:DeciderMode> ";" => Statement::Decider { <> },

    <output:Output> "<-" <left:Input> <op:ArithmeticOp> <right:Input> ";" => Statement::Arithmetic { <> },

    // FIXME: Lamp doesn't take consts as input??
    "lamp" <left:Input> <op:DeciderOp> <right:Input> ";" => Statement::Lamp { <> },

    //"speaker" <left:Output> <op:DeciderOp> <Expr> ";" => Statement::Speaker { <> },

    "new" <ident:Ident> <generics:("<" <CommaSeperated<GenericArg>> ">")?> "(" <ports:CommaSeperated<PortArg>> ")" ";" => Statement::ModuleInst { <> },

    "if" <cond:ConstCond> "{" <then_case:(<Statement>)*> "}" <else_case:("else" "{" <(<Statement>)*> "}")?> ";" => Statement::Conditional { <> },
}

pub GenericArg: GenericArg = {
    <Signal> => GenericArg::Signal(<>),
    <Expr1> => GenericArg::Number(<>),
}

pub PortArg: PortArg = {
    <port: Ident> ":" <wire: Ident> => PortArg { <> },
}

pub SignalConst: SignalConst = {
    <signal:Signal> "=" <value:Expr1> => SignalConst { <> },
}

pub Output: Output = {
    <wires:Wires> <signal:("[" <Signal> "]")?> => Output { <> },
}

pub Input: Input = {
    <wires:Wires> <signal:("[" <Signal> "]")?> => Input::Signal { <> },
    <Expr5> => Input::Number(<>),
}

pub Wires: Wires = {
    <ident:Ident> => Wires::Single(ident),
    "(" <red:Ident> "," <green:Ident> ")" => Wires::Both { <> },
}

pub DeciderOp: DeciderOp = {
    ">=" => DeciderOp::GreaterEqual,
    "<=" => DeciderOp::LessEqual,
    ">" => DeciderOp::GreaterThan,
    "<" => DeciderOp::LessThan,
    "==" => DeciderOp::Equal,
    "!=" => DeciderOp::NotEqual,
}

pub ArithmeticOp: ArithmeticOp = {
    "*" => ArithmeticOp::Multiply,
    "/" => ArithmeticOp::Divide,
    "+" => ArithmeticOp::Add,
    "-" => ArithmeticOp::Subtract,
    "%" => ArithmeticOp::Modulo,
    "**" => ArithmeticOp::Power,
    "<<" => ArithmeticOp::LeftShift,
    ">>" => ArithmeticOp::RightShift,
    "&" => ArithmeticOp::BitwiseAnd,
    "|" => ArithmeticOp::BitwiseOr,
    "^" => ArithmeticOp::BitwiseXor,
}

pub DeciderMode: DeciderMode = {
    "!1" => DeciderMode::One,
    "_" => DeciderMode::Passthrough,
}

pub WireColor: WireColor = {
    "red" => WireColor::Red,
    "green" => WireColor::Green,
}

Seperated<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Expr1: Expr = {
    <l:Expr1> "+" <r:Expr2> => Expr::Add(Box::new(l), Box::new(r)),
    <l:Expr1> "-" <r:Expr2> => Expr::Sub(Box::new(l), Box::new(r)),
    Expr2,
}

Expr2: Expr = {
    <l:Expr2> "*" <r:Expr3> => Expr::Mul(Box::new(l), Box::new(r)),
    <l:Expr2> "/" <r:Expr3> => Expr::Div(Box::new(l), Box::new(r)),
    <l:Expr2> "%" <r:Expr3> => Expr::Mod(Box::new(l), Box::new(r)),
    Expr3,
}

Expr3: Expr = {
    <l:Expr3> "&" <r:Expr4> => Expr::BitAnd(Box::new(l), Box::new(r)),
    <l:Expr3> "|" <r:Expr4> => Expr::BitOr(Box::new(l), Box::new(r)),
    <l:Expr3> "^" <r:Expr4> => Expr::BitXor(Box::new(l), Box::new(r)),
    Expr4,
}

Expr4: Expr = {
    "-" <x:Expr5> => Expr::Neg(Box::new(x)),
    "~" <x:Expr5> => Expr::BitNot(Box::new(x)),
    Expr5,
}

Expr5: Expr = {
    Num => Expr::Const(<>),
    //NumHex => Expr::Const(<>),
    //NumDec => Expr::Const(<>),
    NumVar => Expr::Var(<>),
    "(" <Expr1> ")",
}

ConstCond: ConstCond = {
    <left:Expr1> <op:DeciderOp> <right:Expr1> => ConstCond { <> },
}

pub SignalVar: Ident = "$(" <Ident> ")";

pub NumVar: Ident = "#" <Ident>;

pub Signal: Signal = {
    <s:r"\$[a-zA-Z0-9]"> => Signal::shorthand(&s[1..]), // Shorthand for virtual signals
    "$v(" <Ident> ")" => Signal::Virtual(<>),
    "$i(" <Ident> ")" => Signal::Item(<>),
    "$f(" <Ident> ")" => Signal::Fluid(<>),
    "$each" => Signal::Each,
    "$all" => Signal::All,
    "$any" => Signal::Any,
    SignalVar => Signal::Var(<>)
}

CommaSeperated<T>: Vec<T> = Seperated<T, ",">;
DotSeperated<T>: Vec<T> = Seperated<T, ".">;

pub Import: ImportPath = {
    "import" <path:DotSeperated<Ident>> ";" => ImportPath(<>),
}

pub Num: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
pub Ident: Ident = r"[_a-zA-Z][_\-a-zA-Z0-9]*" => Ident::from(<>);
